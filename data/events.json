[null,{"name":"bot-dm-log-embed","temp":"dm-msg","event-type":"2","actions":[{"behavior":"0","interpretation":"1","code":"tempVars(\"dm-msg\").member == null ? tempVars(\"dm-msg\").channel.recipient.username : \"\"","storage":"1","varName":"username","name":"Run Script"},{"storage":"1","varName":"username","comparison":"0","value":"","iftrue":"0","iftrueVal":"","iffalse":"1","iffalseVal":"","name":"Check Variable"},{"behavior":"0","interpretation":"1","code":"tempVars(\"dm-msg\").content","storage":"1","varName":"msg-content","name":"Run Script"},{"behavior":"0","interpretation":"1","code":"tempVars(\"dm-msg\").channel.recipient.avatarURL","storage":"1","varName":"auth_URL","name":"Run Script"},{"info":"0","find":"634588211590725642","storage":"1","varName":"server","name":"Find Server"},{"server":"1","varName":"server","name":"Change Server"},{"info":"1","find":"staff-mail-logs","storage":"1","varName":"logchannel","name":"Find Channel"},{"title":"**Support Message**","author":"","color":"#ffffff","timestamp":"true","url":"","authorIcon":"","imageUrl":"","thumbUrl":"","storage":"1","varName":"e","name":"Create Embed Message"},{"storage":"1","varName":"e","fieldName":"Message","message":"${tempVars(\"msg-content\")}","inline":"1","name":"Add Embed Field"},{"behavior":"0","interpretation":"0","code":"tempVars(\"e\").setFooter(tempVars(\"username\"), tempVars(\"auth_URL\"))","storage":"0","varName":"","name":"Run Script"},{"storage":"1","varName":"e","channel":"5","varName2":"logchannel","name":"Send Embed Message"}],"_id":"QvUox","restriction":"0"},{"name":"welcom-bye","temp":"","event-type":"1","_id":"DOeoU","actions":[{"info":"1","find":"üëçwelcome","storage":"2","varName":"Channel1","name":"Find Channel"},{"info":"1","find":"üìãrules","storage":"2","varName":"Rules","name":"Find Channel"},{"info":"1","find":"Tickets","storage":"2","varName":"tick","name":"Find Category"}]},{"name":"WelcomeMessage","temp":"member","event-type":"6","actions":[{"title":"Welcome","author":"","color":"","url":"","authorIcon":"","authorUrl":"","imageUrl":"","thumbUrl":"https://cdn.discordapp.com/attachments/535127092115931139/617139887090696198/Screenshot_8.png","timestamp":"true","text":"","year":"","month":"","day":"","hour":"","minute":"","second":"","storage":"1","varName":"Welcome","name":"Create Embed Message"},{"title":"Welcome1","author":"","color":"","url":"","authorIcon":"","authorUrl":"","imageUrl":"","thumbUrl":"https://cdn.discordapp.com/attachments/535127092115931139/617139887090696198/Screenshot_8.png","timestamp":"true","text":"","year":"","month":"","day":"","hour":"","minute":"","second":"","storage":"1","varName":"Welcome1","name":"Create Embed Message"},{"storage":"1","varName":"Welcome","message":"${tempVars(\"member\")} Please read ${serverVars(\"Rules\")} and \nif you have any questions please @staff","name":"Set Embed Description"},{"storage":"1","varName":"Welcome1","message":"${tempVars(\"member\")} Please read ${serverVars(\"Rules\")} and \nif you have any questions please @staff","name":"Set Embed Description"},{"storage":"1","varName":"Welcome","channel":"6","varName2":"Channel1","storage3":"0","varName3":"","iffalse":"0","iffalseVal":"","name":"Send Embed Message"},{"storage":"1","varName":"Welcome1","channel":"6","varName2":"Channel12","storage3":"0","varName3":"","iffalse":"0","iffalseVal":"","name":"Send Embed Message"}],"_id":"ClvZn"},{"name":"Leave","temp":"lmember","event-type":"7","actions":[{"title":"Good-Bye","author":"","color":"","url":"","authorIcon":"","authorUrl":"","imageUrl":"","thumbUrl":"https://cdn.discordapp.com/attachments/535127092115931139/617139887090696198/Screenshot_8.png","timestamp":"true","text":"","year":"","month":"","day":"","hour":"","minute":"","second":"","storage":"1","varName":"Bye","name":"Create Embed Message"},{"storage":"1","varName":"Bye","message":"${tempVars(\"lmember\")} I hope you had \na good time in the server","name":"Set Embed Description"},{"storage":"1","varName":"Bye","channel":"6","varName2":"Channel1","storage3":"0","varName3":"","iffalse":"0","iffalseVal":"","name":"Send Embed Message"}],"_id":"ClvZn"},{"name":"game","temp":"","event-type":"1","_id":"lIPCq","actions":[{"activity":"0","nameText":"=Help for commands","url":"","stat":"0","name":"Set Bot Activity"},{"time":"5","measurement":"1","name":"Wait"},{"activity":"2","nameText":"Powered By NetGen-Studios","url":"","stat":"0","name":"Set Bot Activity"},{"time":"5","measurement":"1","name":"Wait"},{"activity":"2","nameText":"Actually Powered By Josh's CPU & RAM","url":"","stat":"0","name":"Set Bot Activity"},{"time":"5","measurement":"1","name":"Wait"},{"info":"3","storage":"1","varName2":"SERVER-c","name":"Store Bot Client Info"},{"activity":"2","nameText":"Over ${tempVars(\"SERVER-c\")} servers","url":"","stat":"0","name":"Set Bot Activity"},{"time":"5","measurement":"1","name":"Wait"},{"call":"1","name":"Jump to Action"}]},{"name":"[Check]VerifyChannelContent","temp":"message","event-type":"2","_id":"QLAIx","actions":[{"info":"19","storage":"1","varName2":"botprefix","name":"Store Bot Client Info"},{"message":"1","varName":"message","info":"4","storage":"1","varName2":"messagechannel","name":"Store Message Info"},{"message":"1","varName":"message","info":"3","storage":"1","varName2":"messageauthor","name":"Store Message Info"},{"member":"2","varName":"messageauthor","info":"1","storage":"1","varName2":"messageauthorid","name":"Store Member Info"},{"channel":"3","varName":"messagechannel","info":"1","storage":"1","varName2":"messagechannelid","name":"Store Channel Info"},{"storage":"1","varName":"messageauthorid","comparison":"1","value":"'BOT_ID'","iftrue":"1","iftrueVal":"","iffalse":"0","iffalseVal":"","name":"Check Variable"},{"storage":"1","varName":"messagechannelid","comparison":"1","value":"'VERIFY_CHANNEL_ID'","iftrue":"0","iftrueVal":"","iffalse":"1","iffalseVal":"","name":"Check Variable"},{"message":"1","varName":"message","info":"2","storage":"1","varName2":"messagetext","name":"Store Message Info"},{"storage":"1","varName":"messagetext","comparison":"1","value":"'tempVars(\"botprefix\")verify'","iftrue":"1","iftrueVal":"","iffalse":"0","iffalseVal":"","name":"Check Variable"},{"storage":"1","varName":"message","name":"Delete Message"}]},{"name":"reactionGet","temp":"msgReaction","event-type":"28","_id":"zimku","actions":[{"reaction":"1","varName":"msgReaction","info":"0","storage":"1","varName2":"messageRct","name":"Store Reaction Info"},{"behavior":"1","interpretation":"1","code":"const reaction = tempVars('msgReaction');\nconst msgRct = tempVars('messageRct');\nconst rectarray = globalVars('reactionRoleInf');\nvar usrWhoReacted = reaction.users.last();\nconst _this = this;\nvar messageSent = 'Successfully added the role {roleName} in {server}'; \nvar interval;\nvar arrayNum;\n\n// Setings\n\nconst dmUserAfter = true; // Default, can be changed to false\n\n//\n\nasync function checkRoles() {\n\tif (usrWhoReacted.id != client.user.id) {\n\t\tif (usrWhoReacted.data('cooldownData.reactionMenu') != 1) {\n\t\t\tfor (i = 0; i < rectarray.length; i++) {\n\t\t\t\tif (rectarray[i][msgRct.id] != null) {\n                    arrayNum = i;\n\t\t\t\t\tvar newArr = rectarray[i][msgRct.id];\n\t\t\t\t\tfor (io = 0; io < newArr.length; io++) {\n\t\t\t\t\t\tif (newArr[io][0] == reaction.emoji.name) {\n\t\t\t\t\t\t\tvar newUsr = await msgRct.guild.fetchMember(usrWhoReacted);\n\t\t\t\t\t\t\tvar checkRole = await msgRct.guild.roles.get(newArr[io][1])\n\t\t\t\t\t\t\tif (checkRole != null) {\n\t\t\t\t\t\t\t\tif (newUsr.roles.has(newArr[io][1])) {\n                                    usrWhoReacted.setData('cooldownData.reactionMenu', '1');\n\t\t\t\t\t\t\t\t\tvar tempThing = globalVars('reactionRoleInf');\n\t\t\t\t\t\t\t\t\ttempThing[i][msgRct.id][3] = await reaction.users.array();\n                                    _this.storeValue(tempThing, 3, 'reactionRoleInf', cache)\n                                    interval = setInterval(resetTimer, 1000)\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t} else {\n                                    usrWhoReacted.setData('cooldownData.reactionMenu', '1');\n\t\t\t\t\t\t\t\t\tvar tempThing = globalVars('reactionRoleInf');\n\t\t\t\t\t\t\t\t\ttempThing[i][msgRct.id][3] = await reaction.users.array();\n\t\t\t\t\t\t\t\t\t_this.storeValue(tempThing, 3, 'reactionRoleInf', cache)\n\t\t\t\t\t\t\t\t\tnewUsr.addRole(newArr[io][1]);\n\t\t\t\t\t\t\t\t\tif (dmUserAfter) {\n                                        messageSent = messageSent.replace(/{roleName}/g, newArr[io][2]);\n                                        messageSent = messageSent.replace(/{server}/g, msgRct.guild.name);\n\t\t\t\t\t\t\t\t\t\tnewUsr.send(messageSent);\n                                    }\n                                    interval = setInterval(resetTimer, 1000)\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n                                var newArray = rectarray.filter(someItem => {\n                                    someItem.hasOwnProperty(msgRct.id) != true\n                                })\n                                _this.storeValue(newArray, 3, 'reactionRoleInf', cache);\n                                _this.storeValue(JSON.stringify(newArray), 3, 'tempData', cache);\n\t\t\t\t\t\t\t\tmsgRct.edit({\n\t\t\t\t\t\t\t\t\tembed: {\n\t\t\t\t\t\t\t\t\t\tcolor: 0xff0000,\n\t\t\t\t\t\t\t\t\t\ttitle: \"Role Reaction Menu\",\n\t\t\t\t\t\t\t\t\t\tdescription: `An error has occured.\\nOne of the roles, role name - ${newArr[io][2]} does not exist anymore.\\nIn turn, this embed has now shutdown.\\nPlease remake the embed.`,\n\t\t\t\t\t\t\t\t\t\ttimestamp: new Date()\n\t\t\t\t\t\t\t\t\t}\n                                });\n                                _this.callNextAction(cache);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n            usrWhoReacted.setData('cooldownData.reactionMenu', '0');\n        }\n\t}\n\n}\n\nfunction resetTimer() {\n    usrWhoReacted.setData('cooldownData.reactionMenu', '0');\n    clearInterval(interval);\n}\n\ncheckRoles();","storage":"0","varName":"","name":"Run Script"},{"storage":"3","varName":"tempData","name":"Save Variable"}]},{"name":"reactionRev","temp":"msgReaction","event-type":"29","_id":"ZQmhC","actions":[{"reaction":"1","varName":"msgReaction","info":"0","storage":"1","varName2":"messageRct","name":"Store Reaction Info"},{"behavior":"1","interpretation":"1","code":"const reaction = tempVars('msgReaction');\nconst msgRct = tempVars('messageRct');\nconst rectarray = globalVars('reactionRoleInf');\nvar usrWhoReacted = reaction.users.array();\nconst _this = this;\nvar messageSent = 'Successfully removed the role {roleName} in {server}'; \n// The only variables that work rn, {rolename} and {server}\nvar actualUser;\n// Setings\n\nconst dmUserAfter = true; // Default, can be changed to false\n\n//\n\nasync function checkRoles() {\n\tfor (i = 0; i < rectarray.length; i++) {\n\t\tif (rectarray[i][msgRct.id] != null) {\n            arrayNum = i;\n\t\t\tif (rectarray[i][msgRct.id][3] != null) {\n\t\t\t\tusrWhoReacted = rectarray[i][msgRct.id][3].filter(val => !usrWhoReacted.includes(val))[0];\n\t\t\t\tif (usrWhoReacted != null) {\n\t\t\t\t\tif (usrWhoReacted.data('cooldownData.reactionMenu') != 1) {\n\t\t\t\t\t\tvar newArr = rectarray[i][msgRct.id];\n\t\t\t\t\t\tfor (io = 0; io < newArr.length; io++) {\n\t\t\t\t\t\t\tif (newArr[io][0] == reaction.emoji.name) {\n\t\t\t\t\t\t\t\tvar newUsr = await msgRct.guild.fetchMember(usrWhoReacted);\n\t\t\t\t\t\t\t\tvar checkRole = await msgRct.guild.roles.get(newArr[io][1]);\n\t\t\t\t\t\t\t\tif (checkRole != null) {\n\t\t\t\t\t\t\t\t\tif (!newUsr.roles.has(newArr[io][1])) {\n                                        usrWhoReacted.setData('cooldownData.reactionMenu', '1');\n                                        var tempThing = globalVars('reactionRoleInf');\n\t\t\t\t\t\t\t\t\t    tempThing[i][msgRct.id][3] = await reaction.users.array();\n                                        _this.storeValue(tempThing, 3, 'reactionRoleInf', cache);\n                                        interval = setInterval(resetTimer, 1000);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t} else {\n                                        var tempThing = globalVars('reactionRoleInf');\n                                        usrWhoReacted.setData('cooldownData.reactionMenu', '1');\n\t\t\t\t\t\t\t\t\t\ttempThing[i][msgRct.id][3] = await reaction.users.array();\n\t\t\t\t\t\t\t\t\t\t_this.storeValue(tempThing, 3, 'reactionRoleInf', cache)\n\t\t\t\t\t\t\t\t\t\tnewUsr.removeRole(newArr[io][1]);\n\t\t\t\t\t\t\t\t\t\tif (dmUserAfter) {\n\t\t\t\t\t\t\t\t\t\t\tmessageSent = messageSent.replace(/{roleName}/g, newArr[io][2]);\n                                            messageSent = messageSent.replace(/{server}/g, msgRct.guild.name);\n\t\t\t\t\t\t\t\t\t\t    newUsr.send(messageSent);\n                                        }\n                                        interval = setInterval(resetTimer, 1000);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n                                    var newArray = rectarray.filter(someItem => {\n                                        someItem.hasOwnProperty(msgRct.id) != true\n                                    })\n                                    _this.storeValue(newArray, 3, 'reactionRoleInf', cache);\n                                    _this.storeValue(JSON.stringify(newArray), 3, 'tempData', cache);\n\t\t\t\t\t\t\t\t\tmsgRct.edit({\n\t\t\t\t\t\t\t\t\t\tembed: {\n\t\t\t\t\t\t\t\t\t\t\tcolor: 0xff0000,\n\t\t\t\t\t\t\t\t\t\t\ttitle: \"Role Reaction Menu\",\n\t\t\t\t\t\t\t\t\t\t\tdescription: `An error has occured.\\nOne of the roles, role name - ${newArr[io][2]} does not exist anymore.\\nIn turn, this embed has now shutdown.\\nPlease remake the embed.`,\n\t\t\t\t\t\t\t\t\t\t\ttimestamp: new Date()\n\t\t\t\t\t\t\t\t\t\t}\n                                    });\n                                    _this.callNextAction(cache);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n                        usrWhoReacted.setData('cooldownData.reactionMenu', '0');\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nfunction resetTimer() {\n    usrWhoReacted.setData('cooldownData.reactionMenu', '0');\n    clearInterval(interval);\n}\n\ncheckRoles();","storage":"0","varName":"","name":"Run Script"},{"storage":"3","varName":"tempData","name":"Save Variable"}]},{"name":"reactionStart","temp":"","event-type":"1","_id":"Lwriz","actions":[{"storage":"3","varName":"reactionRoleInf","changeType":"0","value":"[]","name":"Control Variable"},{"behavior":"0","interpretation":"1","code":"const _this = this;\nconst fs = require('fs');\nvar someArray = [];\nvar someNum = 0;\nvar globalData;\nvar interval;\n\nfs.readFile('./data/globalVars.json', function read(err, data) {\n    if (err) {\n        throw err;\n    }\n    var savedVars = JSON.parse(data);\n    \n    if (savedVars.hasOwnProperty('tempData')) {\n        var newThing = savedVars.tempData.replace(/[\\\\]/g,'');\n        try {\n            _this.storeValue(JSON.parse(newThing), 3, 'reactionRoleInf', cache);\n            console.log('Saved reactionRoleInf');\n        } catch (e) {\n            console.log('Invalid JSON - Saved Vars')\n        }\n    }\n\n    if(fs.existsSync('./resources/serverRoleMenu.json')) {\n        fs.readFile('./resources/serverRoleMenu.json', async function read(err, data) {\n            if (err) {\n                throw err;\n            }\n            var DataToLoop = JSON.parse(data);\n            globalData = DataToLoop;\n            for (var key in DataToLoop) {\n                if (DataToLoop.hasOwnProperty(key)) {\n                    await someArray.push(DataToLoop[key]);\n                }\n            }\n            interval = setInterval(fetchMessages, 2000);\n        })\n\n    } else {\n        fs.writeFile(\"./resources/serverRoleMenu.json\", \"{}\", function(err) {\n            if(err) {\n                return console.log(err);\n            }\n        });\n    }\n});\n\nfunction fetchMessages() {\n if (someNum != someArray.length) {\n     var channelToFetch = client.channels.get(someArray[someNum]);\n     if (channelToFetch != null) {\n        channelToFetch.fetchMessages({ limit: 100 });\n        console.log(`Fetched messages in channel id ${someArray[someNum]}`);\n        someNum = someNum + 1;\n     } else {\n        delete globalData[someArray[someNum]];\n        fs.writeFile(\"./resources/serverRoleMenu.json\", JSON.stringify(globalData), function(err) {\n            if(err) {\n                return console.log(err);\n            }\n        }); \n     }\n } else {\n    console.log('Finished fetching messages from all logged servers.')\n    clearInterval(interval);\n }\n}","storage":"0","varName":"","name":"Run Script"}]},{"name":"ActivateCachedOnReaction","temp":"","event-type":"1","_id":"RpJOG","actions":[{"behavior":"1","interpretation":"1","code":"// This script makes sure that it actually only runs once-------\n// put others after this Run Script!\nif(!globalVars(\"cached_reactions\")){\n    this.callNextAction(cache)\n    this.storeValue(\"started!!\", 3, \"cached_reactions\", cache)\n}","storage":"0","varName":"","name":"Run Script"},{"behavior":"1","interpretation":"1","code":"client.on('raw', packet => {\n    // We don't want this to run on unrelated packets\n    if (!['MESSAGE_REACTION_ADD', 'MESSAGE_REACTION_REMOVE'].includes(packet.t)) return;\n    // Grab the channel to check the message from\n    const channel = client.channels.get(packet.d.channel_id);\n    // There's no need to emit if the message is cached, because the event will fire anyway for that\n    if (channel.messages.has(packet.d.message_id)) return;\n    // Since we have confirmed the message is not cached, let's fetch it\n    channel.fetchMessage(packet.d.message_id).then(message => {\n        // Emojis can have identifiers of name:id format, so we have to account for that case as well\n        const emoji = packet.d.emoji.id ? `${packet.d.emoji.name}:${packet.d.emoji.id}` : packet.d.emoji.name;\n        // This gives us the reaction we need to emit the event properly, in top of the message object\n        const reaction = message.reactions.get(emoji);\n        // Check which type of event it is before emitting\n        if (packet.t === 'MESSAGE_REACTION_ADD') {\n            client.emit('messageReactionAdd', reaction, client.users.get(packet.d.user_id));\n        }\n        if (packet.t === 'MESSAGE_REACTION_REMOVE') {\n            client.emit('messageReactionRemove', reaction, client.users.get(packet.d.user_id));\n        }\n    });\n});","storage":"0","varName":"","name":"Run Script"}]},{"name":"NewTixReact","temp":"reaction","event-type":"28","_id":"gDstk","actions":[{"reaction":"1","varName":"reaction","info":"0","storage":"1","varName2":"message_obj","name":"Store Reaction Info"},{"message":"1","varName":"message_obj","info":"4","storage":"1","varName2":"chan","name":"Store Message Info"},{"channel":"3","varName":"chan","info":"2","storage":"1","varName2":"chan_name","name":"Store Channel Info"},{"storage":"1","varName":"chan_name","comparison":"1","value":"\"new-ticket\"","iftrue":"0","iftrueVal":"","iffalse":"1","iffalseVal":"","name":"Check Variable"},{"reaction":"1","varName":"reaction","info":"7","storage":"1","varName2":"last_user","name":"Store Reaction Info"},{"member":"2","varName":"last_user","info":"0","varName2":"","iftrue":"1","iftrueVal":"","iffalse":"0","iffalseVal":"","name":"Check If Member"},{"reaction":"1","varName":"reaction","info":"3","storage":"1","varName2":"emoji_name","name":"Store Reaction Info"},{"reaction":"1","varName":"reaction","member":"2","varName2":"last_user","name":"Remove Reaction"},{"member":"2","varName":"last_user","info":"3","storage":"1","varName2":"displayName","name":"Store Member Info"},{"storage":"1","varName":"last_user","comparison":"0","value":"","iftrue":"0","iftrueVal":"","iffalse":"1","iffalseVal":"","name":"Check Variable"},{"storage":"1","varName":"emoji_name","comparison":"1","value":"\"üì∞\"","iftrue":"0","iftrueVal":"","iffalse":"1","iffalseVal":"","name":"Check Variable"},{"comment":"-- Create New Tix Channel --","color":"#00ffff","name":"Comment"},{"server":"0","varName":"","dataName":"tickets","defaultVal":"1","storage":"1","varName2":"ticketcount","name":"Store Server Data"},{"channelName":"ticket-${tempVars(\"displayName\")}-${tempVars(\"ticketcount\")}","categoryID":"${serverVars(\"ticketsCategoryID\")}","topic":"N/A - Created from reaction menu","position":"","storage":"1","varName":"newTix","name":"Create Text Channel"},{"server":"0","varName":"","dataName":"tickets","changeType":"1","value":"1","name":"Control Server Data"},{"channel":"3","varName":"newTix","info":"2","storage":"1","varName2":"name","name":"Store Channel Info"},{"comment":"Command message reply","color":"#60bff2","name":"Comment"},{"time":"500","measurement":"0","name":"Wait"},{"title":"Ticket Created","author":"","color":"#e65df4","url":"","authorIcon":"","authorUrl":"","imageUrl":"","thumbUrl":"","timestamp":"true","debug":"false","text":"","year":"","month":"","day":"","hour":"","minute":"","second":"","storage":"1","varName":"created","name":"Create Embed Message"},{"storage":"1","varName":"created","message":"Thanks for creating a ticket! You can view it by going to ${tempVars(\"newTix\")}","name":"Set Embed Description"},{"storage":"1","varName":"created","channel":"5","varName2":"chan","storage3":"1","varName3":"createdmsg","iffalse":"0","iffalseVal":"","name":"Send Embed Message"},{"comment":"Set Perms","color":"#60bff2","name":"Comment"},{"info":"1","find":"Support Team","storage":"1","varName":"supportRole","name":"Find Role"},{"storage":"3","varName":"newTix","permission":"READ_MESSAGES","state":"1","name":"Set Channel Permissions"},{"channel":"3","varName":"newTix","member":"2","varName2":"last_user","permission":"READ_MESSAGES","state":"0","name":"Set Member Channel Perms"},{"channel":"3","varName":"newTix","role":"3","varName2":"supportRole","permission":"READ_MESSAGES","state":"0","name":"Set Role Channel Perms"},{"member":"2","varName":"last_user","dataName":"${tempVars(\"name\")}_creator","changeType":"0","value":"1","name":"Control Member Data"},{"comment":"Logging (inside)","color":"#60bff2","name":"Comment"},{"input":"Author ID: [${tempVars(\"last_user\").id}] \" + \\n + \"\nTopic: [N/A - Created from reaction menu]","format":".txt","filename":"${tempVars(\"name\")}","filepath":"./logs/","filetask":"2","name":"File Control"},{"title":"","author":"","color":"#00FFFF","url":"","authorIcon":"","authorUrl":"","imageUrl":"","thumbUrl":"","timestamp":"true","debug":"false","text":"","year":"","month":"","day":"","hour":"","minute":"","second":"","storage":"1","varName":"in","name":"Create Embed Message"},{"storage":"1","varName":"in","fieldName":"Ticket Created","message":"${tempVars(\"last_user\")} has created a new ticket.","inline":"1","name":"Add Embed Field"},{"storage":"1","varName":"in","fieldName":"Subject","message":"N/A - Created from reaction menu","inline":"1","name":"Add Embed Field"},{"storage":"1","varName":"in","channel":"5","varName2":"newTix","storage3":"0","varName3":"","iffalse":"0","iffalseVal":"","name":"Send Embed Message"},{"comment":"Logging","color":"#60bff2","name":"Comment"},{"info":"1","find":"ticket-logs","storage":"1","varName":"ticketLogsChannel","name":"Find Channel"},{"title":"Ticket Created","author":"","color":"#e65df4","url":"","authorIcon":"","authorUrl":"","imageUrl":"","thumbUrl":"","timestamp":"true","debug":"false","text":"","year":"","month":"","day":"","hour":"","minute":"","second":"","storage":"1","varName":"log","name":"Create Embed Message"},{"storage":"1","varName":"log","message":"${tempVars(\"last_user\")} has opened a new ticket ${tempVars(\"newTix\")}.","name":"Set Embed Description"},{"storage":"1","varName":"log","fieldName":"Ticket ID","message":"ticket-${tempVars(\"displayName\")}-${tempVars(\"ticketcount\")}","inline":"1","name":"Add Embed Field"},{"storage":"1","varName":"log","channel":"5","varName2":"ticketLogsChannel","storage3":"0","varName3":"","iffalse":"0","iffalseVal":"","name":"Send Embed Message"},{"time":"10","measurement":"1","name":"Wait"},{"storage":"1","varName":"createdmsg","name":"Delete Message"}]},{"name":"rolwe","temp":"memb","event-type":"6","_id":"OpqFR","actions":[{"info":"1","find":"Memeber","storage":"1","varName":"gg","name":"Find Role"},{"member":"2","varName2":"Memb","role":"3","varName":"gg","name":"Add Member Role"}]},{"name":"gg","temp":"","event-type":"0","_id":"fTuUd","actions":[{"channel":"4","varName":"","message":"${mentionedUser}üíª","storage":"0","varName2":"","iffalse":"0","iffalseVal":"","name":"Send Message"}]},{"name":"-------------------------------------","temp":"","event-type":"0","_id":"aGYJG","actions":[]},{"name":"channel-created","temp":"channelcreated","event-type":"8","_id":"AAVpZ","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst channelcreated = tempVars('channelcreated');\nlet embed = new DiscordJS.RichEmbed();\n\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.channel-created`);\n    if (log_system === \"enabled\") {\n        if (!channelcreated.name.startsWith(\"ticket-\")) {\n            embed.setTitle('Channel Created');\n            embed.setColor('#20fc3a');\n            embed.addField('Name', channelcreated, true);\n            embed.addField('Category', (channelcreated.parent && channelcreated.parent.name) ? channelcreated.parent.name : \"None\", true);\n            embed.setFooter(`ID: ${channelcreated.id}`);\n            embed.setTimestamp();\n            server.channels.get(log_chan).send(embed);\n            db.add(`${server.id}logs.channel_created`, 1);\n            db.add(`${server.id}logs.all`, 1);\n        }\n    }\n}\n","storage":"0","varName":"","name":"Run Script"}]},{"name":"channel-deleted","temp":"channeldeleted","event-type":"9","_id":"LVnFA","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst channeldeleted = tempVars('channeldeleted');\nlet embed = new DiscordJS.RichEmbed();\n\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.channel-deleted`);\n    if (log_system === \"enabled\") {\n        if (!channeldeleted.name.startsWith(\"ticket-\")) {\n            embed.setTitle('Channel Deleted');\n            embed.setColor('RED');\n            embed.setTimestamp();\n            embed.addField('Name', channeldeleted.name, true);\n            embed.addField('Category', (channeldeleted.parent && channeldeleted.parent.anem) ? channeldeleted.parent.name : \"None\", true);\n            embed.setFooter(`ID: ${channeldeleted.id}`);\n            server.channels.get(log_chan).send(embed);\n            db.add(`${server.id}logs.channel_deleted`, 1);\n            db.add(`${server.id}logs.all`, 1);\n        }\n    }\n}\n","storage":"0","varName":"","name":"Run Script"}],"restriction":"0"},{"name":"channel-updated","temp":"channelbefore","event-type":"23","_id":"vXtCx","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst channelbefore = tempVars('channelbefore');\nconst channelafter = tempVars('channelafter');\nlet embed = new DiscordJS.RichEmbed();\n\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.channel-updated`);\n    if (log_system === \"enabled\") {\n        if (!channelbefore.name.startsWith(\"ticket-\")) {\n            if (channelbefore != channelafter) {\n                embed.setTitle(`Channl ${channelbefore.name} Updated`);\n                embed.setColor('#20fc3a');\n                embed.addField('Name', (channelbefore.name == channelafter.name) ? \"Updated: ‚ùå\" : `Updated: ‚úÖ \\n New Name: ${channelafter.name}`, true);\n                embed.addField('Topic', (channelbefore.topic == channelafter.topic) ? \"Updated: ‚ùå\" : `Updated: ‚úÖ \\n New Topic: ${channelafter.topic}`, true);\n                embed.addField('Is NSFW?', (channelafter.nsfw) ? \"‚úÖ\" : \"‚ùå\", true);\n                embed.addField('Category', (channelafter.parent && channelbefore.parent.name == channelafter.parent.name) ? \"Updated: ‚ùå\" : `Updated: ‚úÖ \\n New Category: ${channelafter.parent.name}`, true);\n                embed.addField('Position', (channelbefore.position == channelafter.position) ? \"Updated: ‚ùå\" : `Updated:  ‚úÖ \\n New Position: ${channelafter.position}`, true);\n                embed.setFooter(`ID: ${channelafter.id}`);\n                embed.setTimestamp();\n                server.channels.get(log_chan).send(embed);\n                db.add(`${server.id}logs.channel_updated`, 1);\n                db.add(`${server.id}logs.all`, 1);\n            }\n        }\n    }\n}","storage":"0","varName":"","name":"Run Script"}],"temp2":"channelafter","restriction":"0"},{"name":"emoji-created","temp":"emojicreated","event-type":"16","_id":"NsZuU","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst emojicreated = tempVars('emojicreated');\nlet embed = new DiscordJS.RichEmbed();\n\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.emoji-created`);\n    if (log_system === \"enabled\") {\n        embed.setTitle('Emoji Created');\n        embed.setColor('#20fc3a');\n        embed.setThumbnail(emojicreated.url);\n        embed.addField('Name', emojicreated.name, true);\n        embed.addField('Identifier', emojicreated.identifier, true);\n        embed.addField('Is Animated?', emojicreated.animated, true);\n        embed.setFooter(`ID: ${emojicreated.id}`);\n        embed.setTimestamp();\n        server.channels.get(log_chan).send(embed);\n        db.add(`${server.id}logs.emoji_created`, 1);\n        db.add(`${server.id}logs.all`, 1);\n    }\n}","storage":"0","varName":"","name":"Run Script"}]},{"name":"member-join","temp":"memberjoin","event-type":"6","_id":"WFmNF","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst memberjoin = tempVars('memberjoin');\nlet embed = new DiscordJS.RichEmbed();\n\n(async () => {\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.member-join`);\n    if (log_system === \"enabled\") {\n        const memS = await server.fetchMembers();\n        embed.setTitle('Member Joined');\n        embed.setColor('#3dd0f4');\n        embed.setAuthor(memberjoin.user.tag, memberjoin.user.displayAvatarURL);\n        embed.setThumbnail(memberjoin.user.displayAvatarURL);\n        embed.addField('User', memberjoin, true);\n        embed.addField('Member Count', server.members.size, true);\n        embed.setFooter(`ID: ${memberjoin.user.id}`);\n        embed.setTimestamp();\n        server.channels.get(log_chan).send(embed);\n        db.add(`${server.id}logs.member_joined`, 1);\n        db.add(`${server.id}logs.all`, 1);\n    }\n}\n})();","storage":"0","varName":"","name":"Run Script"}],"restriction":"0"},{"name":"member-leave","temp":"memberleave","event-type":"7","_id":"sJMAW","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst memberleave = tempVars('memberleave');\nlet embed = new DiscordJS.RichEmbed();\n\n(async () => {\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.member-leave`);\n    if (log_system === \"enabled\") {\n        const memS = await server.fetchMembers();\n        embed.setTitle('Member Left');\n        embed.setColor('#3dd0f4');\n        embed.setAuthor(memberleave.user.tag, memberleave.user.displayAvatarURL);\n        embed.setThumbnail(memberleave.user.displayAvatarURL);\n        embed.addField('User', memberleave, true);\n        embed.addField('Member Count', server.members.size, true);\n        embed.setFooter(`ID: ${memberleave.user.id}`);\n        embed.setTimestamp();\n        server.channels.get(log_chan)\n            .send(embed);\n        db.add(`${server.id}logs.member_leave`, 1);\n        db.add(`${server.id}logs.all`, 1);\n    }\n}\n})();","storage":"0","varName":"","name":"Run Script"}],"restriction":"0"},{"name":"message-deleted","temp":"msgdel","event-type":"18","_id":"XpYuO","actions":[{"behavior":"1","interpretation":"1","code":"if (me.permissions.has('VIEW_AUDIT_LOG')) {\n    server.fetchAuditLogs()\n        .then(audit => {\n            this.storeValue(audit.entries.first()\n                .executor, 1, \"delby\", cache);\n            Actions.callNextAction(cache);\n        })\n        .catch(console.error);\n} else {\n    Actions.callNextAction(cache);\n}","storage":"0","varName":"","name":"Run Script"},{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst msgdel = tempVars('msgdel');\nconst delby = tempVars(\"delby\");\nlet embed = new DiscordJS.RichEmbed();\n\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.message-deleted`);\n    if (log_system === \"enabled\") {\n        if (msgdel.author.bot == false) {\n            embed.setTitle('Message Deleted');\n            embed.setURL(msgdel.url);\n            embed.setAuthor(msgdel.author.tag, msgdel.author.displayAvatarURL);\n            embed.setThumbnail(msgdel.author.displayAvatarURL);\n            embed.addField('Deleted Text', (msgdel.content.length <= 1024) ? msgdel.content : `${msgdel.content.substring(0, 1020)}...`, true);\n            embed.addField('Channel', msgdel.channel, true);\n            embed.addField('Message Author', `${msgdel.author} (${msgdel.author.tag})`, true);\n            (delby) ? (msgdel.author !== delby) ? embed.addField('Deleted By', delby, true): '' : '';\n            (msgdel.mentions.users.size === 0) ? embed.addField('Mentioned Users', 'None', true): embed.addField('Mentioned Users', `Mentioned Member Count: ${msgdel.mentions.users.array().length} \\n Mentioned Users List: \\n ${msgdel.mentions.users.array()}`, true);\n            embed.setTimestamp();\n            server.channels.get(log_chan).send(embed);\n            db.add(`${server.id}logs.message_deleted`, 1);\n            db.add(`${server.id}logs.all`, 1);\n        }\n    }\n}","storage":"0","varName":"","name":"Run Script"}],"restriction":"0"},{"name":"message-edited","temp":"msg1","event-type":"26","_id":"voIMM","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst msg1 = tempVars('msg1');\nconst msg2 = tempVars(\"msg2\");\nlet embed = new DiscordJS.RichEmbed();\n\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.message-edited`);\n    if (log_system === \"enabled\") {\n        if (msg1.author.bot == false) {\n            embed.setTitle('Message Edited');\n            embed.setURL(msg2.url);\n            embed.setAuthor(msg1.author.tag, msg1.author.displayAvatarURL);\n            embed.setColor('#EE82EE');\n            embed.setThumbnail(msg1.author.displayAvatarURL);\n            embed.addField('Original Message', (msg1.content.length <= 1024) ? msg1.content : `${msg1.content.substring(0, 1020)}...`, true);\n            embed.addField('Edited Message', (msg2.content.length <= 1024) ? msg2.content : `${msg2.content.substring(0, 1020)}...`, true);\n            embed.addField('Channel', msg1.channel, true);\n            embed.addField('Message Author', `${msg1.author} (${msg1.author.tag})`, true);\n            embed.addField('Number of Edits', msg2.edits.length, true);\n            (msg2.mentions.users.size === 0) ? embed.addField('Mentioned Users', 'None', true): embed.addField('Mentioned Users', `Mentioned Member Count: ${msg2.mentions.users.array().length} \\n Mentioned Users List: \\n ${msg2.mentions.users.array()}`, true);\n            embed.setTimestamp();\n            server.channels.get(log_chan).send(embed);\n            db.add(`${server.id}logs.message_edited`, 1);\n            db.add(`${server.id}logs.all`, 1);\n        }\n    }\n}","storage":"0","varName":"","name":"Run Script"}],"temp2":"msg2","restriction":"0"},{"name":"role-created","temp":"rolecreated","event-type":"10","_id":"ChohJ","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst rolecreated = tempVars('rolecreated');\nlet embed = new DiscordJS.RichEmbed();\n\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.role-created`);\n    if (log_system === \"enabled\") {\n            embed.setTitle('Role Created');\n            embed.setColor('#20fc3a');\n            embed.addField('Name', rolecreated, true);\n            embed.addField('Managed', rolecreated.managed, true);\n            embed.addField('Position', rolecreated.position, true);\n            embed.setFooter(`ID: ${rolecreated.id}`);\n            embed.setTimestamp();\n            server.channels.get(log_chan).send(embed);\n            db.add(`${server.id}logs.role_created`, 1);\n            db.add(`${server.id}logs.all`, 1);\n    }\n}","storage":"0","varName":"","name":"Run Script"}],"restriction":"0"},{"name":"role-deleted","temp":"roledeleted","event-type":"11","_id":"VDYKZ","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst roledeleted = tempVars('roledeleted');\nlet embed = new DiscordJS.RichEmbed();\n\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.role-deleted`);\n    if (log_system === \"enabled\") {\n            embed.setTitle('Role Deleted');\n            embed.setColor(roledeleted.hexColor);\n            embed.addField('Name', roledeleted.name, true);\n            embed.addField('Managed', roledeleted.managed, true);\n            embed.addField('Position', roledeleted.position, true);\n            embed.setFooter(`ID: ${roledeleted.id}`);\n            embed.setTimestamp();\n            server.channels.get(log_chan).send(embed);\n            db.add(`${server.id}logs.role_deleted`, 1);\n            db.add(`${server.id}logs.all`, 1);\n    }\n}","storage":"0","varName":"","name":"Run Script"}],"restriction":"0"},{"name":"role-updated","temp":"rolebefore","event-type":"25","_id":"BDQWN","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst rolebefore = tempVars('rolebefore');\nconst roleafter = tempVars(\"roleafter\");\nlet embed = new DiscordJS.RichEmbed();\n\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.role-updated`);\n    if (log_system === \"enabled\") {\n        if (roleafter.id != server.id) {\n            if (rolebefore.name != roleafter.name || rolebefore.hexColor != roleafter.hexColor) {\n                embed.setTitle(`Role \"${rolebefore.name}\" Updated`);\n                embed.setColor(roleafter.hexColor);\n                embed.addField('Name', (rolebefore.name == roleafter.name) ? `Updated: :x:` : `Updated: ‚úÖ \\n New Name: ${roleafter.name}`, true);\n                embed.addField('Color', (rolebefore.hexColor == roleafter.hexColor) ? 'Updated: :x:' : `Updated: ‚úÖ \\n New Color: ${roleafter.hexColor}`, true);\n                embed.setFooter(`ID: ${roleafter.id}`);\n                embed.setTimestamp();\n                server.channels.get(log_chan).send(embed);\n                db.add(`${server.id}logs.role_updated`, 1);\n                db.add(`${server.id}logs.all`, 1);\n            }\n        }\n    }\n}","storage":"0","varName":"","name":"Run Script"}],"temp2":"roleafter","restriction":"0"},{"name":"v-channel-created","temp":"channelcreated","event-type":"14","_id":"YOeFC","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst channelcreated = tempVars('channelcreated');\nlet embed = new DiscordJS.RichEmbed();\n\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.v-channel-created`);\n    if (log_system === \"enabled\") {\n        embed.setTitle('Voice Channel Created');\n        embed.setColor('#20fc3a');\n        embed.addField('Name', channelcreated.name, true);\n        embed.addField('Category', (channelcreated.parent && channelcreated.parent.name) ? channelcreated.parent.name : \"None\", true);\n        embed.addField('User Limit', channelcreated.userLimit, true);\n        embed.setFooter(`ID: ${channelcreated.id}`);\n        embed.setTimestamp();\n        server.channels.get(log_chan).send(embed);\n        db.add(`${server.id}logs.v_channel_created`, 1);\n        db.add(`${server.id}logs.all`, 1);\n    }\n}","storage":"0","varName":"","name":"Run Script"}],"restriction":"0"},{"name":"v-channel-deleted","temp":"channeldeleted","event-type":"15","_id":"XQYqW","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst channeldeleted = tempVars('channeldeleted');\nlet embed = new DiscordJS.RichEmbed();\n\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.v-channel-deleted`);\n    if (log_system === \"enabled\") {\n        embed.setTitle('Voice Channel Deleted');\n        embed.setColor('RED');\n        embed.addField('Name', channeldeleted.name, true);\n        embed.addField('Category', (channeldeleted.parent && channeldeleted.parent.name) ? channeldeleted.parent.name : \"None\", true);\n        embed.addField('User Limit', channeldeleted.userLimit, true);\n        embed.setFooter(`ID: ${channeldeleted.id}`);\n        embed.setTimestamp();\n        server.channels.get(log_chan).send(embed);\n        db.add(`${server.id}logs.v_channel_deleted`, 1);\n        db.add(`${server.id}logs.all`, 1);\n    }\n}","storage":"0","varName":"","name":"Run Script"}],"restriction":"0"},{"name":"-------------------------------------","temp":"","event-type":"0","_id":"tqREY","actions":[]},{"name":"Game-Set","temp":"","event-type":"1","_id":"rniGC","actions":[{"info":"3","storage":"1","varName2":"server_count","name":"Store Bot Client Info"},{"gameName":"${tempVars(\"server_count\")} servers | .help","gameLink":"","name":"Set Bot Game"}]}]